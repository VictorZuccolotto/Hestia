esphome:
  name: dedopanel
  comment: NSPanel Quarto Dedo
  platformio_options:
    build_flags: 
      - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API

ota:
  password: "6a068a02a62e3c7c814bfa5c8486b698"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dedopanel Fallback Hotspot"
    password: "vZNZZTQIbVa4"


captive_portal:
# Set some variables for convenience
substitutions:
  #Entidades
  node_name: dedopanel
  device_name: NSPanel Quarto Dedo
  relogio_liga: input_datetime.nsmaleta_liga
  relogio_desliga: input_datetime.nsmaleta_desliga
  target_thermostat: climate.ar_lucas
  ar1: climate.ar_lucas
  ar2: climate.ar_teste_2
  target_lights: light.luz_mesa
  luz1: light.virtual_light_1
  luz2: light.virtual_light_2
  luz3: light.virtual_light_3
  luz4: light.virtual_light_4
  luz5: light.master
  barulho: twobits:d=15,o=6,b=6000:a0
  cena1: switch.virtual_cinema_mode
  cena2: a
  cena3: switch.virtual_spotify_mode
  cena4: switch.virtual_off_dormir_ns
  cena5: a
  tv1: media_player.cinema
  spotify: media_player.echo_de_victor
  restart: button.restart_NSPanel_Quarto_Dedo
  receiver_zone_1: media_player.receiver_teste1_2
  receiver_zone_2: media_player.receiver_teste2
  receiver_zone_3: media_player.receiver_teste3
  receiver_zone_all: media_player.receiver_all
  persiana: cover.cortina_template
  #Paginas
  pag_luzes: "1"
  pag_ar: "4"
  pag_luzrgb: "9"
  pag_music: "5"
  pag_cenas: "3"
  pag_dispositivos: "2"
  pag_ventilador: "7"
  pag_tv: "6"
  pag_config: "8"
  pag_screensaver: "7"
  pag_luzdimmer: "10"
  pag_som: "12"
  pag_timeconfig: "11"
  pag_persiana: "13"

globals:
  - id: selected_receiver
    type: String
  - id: current_page2
    type: String
  - id: slider_aux
    type: bool
    initial_value: 'false'


api:
  password: !secret api_pwd
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'
    - service: set_brightness
      variables:
        cmd: float
      then:
        - lambda: 'id(disp1).set_backlight_brightness(cmd);'
    - service: refresh_painel
      then: 
        - script.execute: refresh


# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name
    device_class: restart

  - platform: template
    name: $device_name TFT Upload
    device_class: update
    on_press:
      - lambda: 'id(disp1).upload_tft();'
            

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: UTC+3
    on_time:
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              id(week_day).publish_state(to_string(id(homeassistant_time).now().day_of_week));
              id(month).publish_state(to_string(id(homeassistant_time).now().month));
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_timeconfig}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_screensaver}").c_str())){
                id(disp1).set_component_text_printf("time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              }
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_screensaver}").c_str())){
                id(disp1).set_component_text_printf("data", "%s, %02i %s", id(week_day).state.c_str(), id(homeassistant_time).now().day_of_month, id(month).state.c_str());
              }
            #id(disp1).set_component_text_printf("data", "%02i/%02i/%04i", id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);
    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: |-
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
                id(disp1).set_component_text_printf("time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              }
# Define some inputs
binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    internal: true
    on_click:
      - switch.toggle: relay_1

  - platform: gpio
    name: $device_name Right Button
    internal: true
    pin:
      number: 27
      inverted: true
    on_click:
    - min_length: 50ms
      max_length: 1000ms
      then:
      - switch.toggle: relay_2
    - min_length: 2000ms
      max_length: 10000ms
      then:
        - rtttl.play: $barulho
        - homeassistant.service:
            service: button.press
            data_template:
              entity_id: $restart
 #chamar servico de reset
            
 ########PAGINA AR##########   
  - platform: nextion
    name: $device_name Minus Button
    page_id: $pag_ar
    component_id: 1
    internal: true
    on_release:
      then:
        - rtttl.play: $barulho
        - homeassistant.service:
            service: climate.set_temperature
            data_template:
              entity_id: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return "${ar1}";
                }else {
                  return "${ar2}";
                }
              temperature: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return "{{ (state_attr(\"$ar1\", \"temperature\")|round(0) == (state_attr(\"$ar1\", \"min_temp\"))) |iif((state_attr(\"$ar1\", \"temperature\")|round(0)), (state_attr(\"$ar1\", \"temperature\")|round(0)) - 1) }}";
                }else {
                  return "{{ (state_attr(\"$ar2\", \"temperature\")|round(0) == (state_attr(\"$ar2\", \"min_temp\"))) |iif((state_attr(\"$ar2\", \"temperature\")|round(0)), (state_attr(\"$ar2\", \"temperature\")|round(0)) - 1) }}";
                }
    
  - platform: nextion
    name: $device_name Plus Button
    page_id: $pag_ar
    component_id: 2
    internal: true
    on_release:
      then:
        - rtttl.play: $barulho
        - homeassistant.service:
            service: climate.set_temperature
            data_template:
              entity_id: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return "${ar1}";
                }else {
                  return "${ar2}";
                }
              temperature: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return "{{ (state_attr(\"$ar1\", \"temperature\")|round(0) == (state_attr(\"$ar1\", \"max_temp\"))) |iif((state_attr(\"$ar1\", \"temperature\")|round(0)), (state_attr(\"$ar1\", \"temperature\")|round(0)) + 1) }}";
                }else {
                  return "{{ (state_attr(\"$ar2\", \"temperature\")|round(0) == (state_attr(\"$ar2\", \"max_temp\"))) |iif((state_attr(\"$ar1\", \"temperature\")|round(0)), (state_attr(\"$ar2\", \"temperature\")|round(0)) + 1) }}";
                }
    
  - platform: nextion
    name: $device_name Fan Speed Button
    page_id: $pag_ar
    component_id: 3
    internal: true
    on_release:
      then:
        - rtttl.play: $barulho
        - homeassistant.service:
            service: climate.set_fan_mode
            data:
              entity_id: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return "${ar1}";
                }else {
                  return "${ar2}";
                }
              fan_mode: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  if (id(ar1_fan_speed).state == "1") {
                    id(ar1_fan_speed).state = "2";
                    return "medium";
                  } else if (id(ar1_fan_speed).state == "2") {
                    id(ar1_fan_speed).state = "3";
                    return "high";
                  } else if (id(ar1_fan_speed).state == "3") {
                    id(ar1_fan_speed).state = "4";
                    return "auto";
                  } else if (id(ar1_fan_speed).state == "4") {
                    id(ar1_fan_speed).state = "1";
                    return "low";
                  } else {
                    id(ar1_fan_speed).state = "4";
                    return "auto";
                  }
                } else{
                  if (id(ar2_fan_speed).state == "1") {
                    id(ar2_fan_speed).state = "2";
                    return "medium";
                  } else if (id(ar2_fan_speed).state == "2") {
                    id(ar2_fan_speed).state = "3";
                    return "high";
                  } else if (id(ar2_fan_speed).state == "3") {
                    id(ar2_fan_speed).state = "4";
                    return "auto";
                  } else if (id(ar2_fan_speed).state == "4") {
                    id(ar2_fan_speed).state = "1";
                    return "low";
                  } else {
                    id(ar2_fan_speed).state = "4";
                    return "auto";
                  }
                }
    
  - platform: nextion
    name: $device_name Power Off Button
    page_id: $pag_ar
    component_id: 4
    internal: true
    on_release:
      then:
        - rtttl.play: $barulho
        - if:
            condition:
              lambda: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return id(ar1_current_mode).state == "0";
                }else{
                  return id(ar2_current_mode).state == "0";
                }
            then:
              - homeassistant.service:
                  service: climate.turn_on
                  data_template:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
            else:
              - homeassistant.service:
                  service: climate.turn_off
                  data_template:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
   
  - platform: nextion
    name: $device_name Auto Button
    page_id: $pag_ar
    component_id: 5
    internal: true
    on_release:
      then:
        - if:
            condition:
              lambda: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return id(ar1_current_mode).state == "auto";
                }else{
                  return id(ar2_current_mode).state == "auto";
                }
            then:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: 'off'
            else:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: heat_cool
    
  - platform: nextion
    name: $device_name Cool Button
    page_id: $pag_ar
    component_id: 6
    internal: true
    on_release:
      then:
        - if:
            condition:
              lambda: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return id(ar1_current_mode).state == "cool";
                }else{
                  return id(ar2_current_mode).state == "cool";
                }
            then:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: 'off'
            else:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: cool
    
  - platform: nextion
    name: $device_name Humidity  Button
    page_id: $pag_ar
    component_id: 7
    internal: true
    on_release:
      then:
        - if:
            condition:
              lambda: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return id(ar1_current_mode).state == "humidity";
                }else{
                  return id(ar2_current_mode).state == "humidity";
                }
            then:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: 'off'
            else:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: dry
    
  - platform: nextion
    name: $device_name Fan Button
    page_id: $pag_ar
    component_id: 8
    internal: true
    on_release:
      then:
        - if:
            condition:
              lambda: !lambda |-
                if ((int)(id(current_ar).state) == 1) {
                  return id(ar1_current_mode).state == "fan";
                }else{
                  return id(ar2_current_mode).state == "fan";
                }
            then:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: 'off'
            else:
              - rtttl.play: $barulho
              - homeassistant.service:
                  service: climate.set_hvac_mode
                  data:
                    entity_id: !lambda |-
                      if ((int)(id(current_ar).state) == 1) {
                        return "${ar1}";
                      }else {
                        return "${ar2}";
                      }
                    hvac_mode: fan_only
 
 ########PAGINA LuzDimmer########## 
  - platform: nextion
    name: $device_name Brightness Slider
    page_id: $pag_luzdimmer
    component_id: 1
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(brightness_value2).update();
        - delay: 50ms
        - homeassistant.service:
            service: light.turn_on
            data:
              entity_id: !lambda |-
                if ((int)(id(current_dimmer).state) == 1) {
                  return "${luz1}";
                }else if ((int)(id(current_dimmer).state) == 2) {
                  return "${luz2}";
                }else if ((int)(id(current_dimmer).state) == 3) {
                  return "${luz3}";
                }else {
                  return "${luz4}";
                }
              brightness: !lambda 'return (int)id(brightness_value2).state;'

  - platform: nextion
    name: $device_name luz2 Button 1
    page_id: $pag_luzdimmer
    component_id: 6
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: !lambda |-
                if ((int)(id(current_dimmer).state) == 1) {
                  return "${luz1}";
                }else if ((int)(id(current_dimmer).state) == 2) {
                  return "${luz2}";
                }else if ((int)(id(current_dimmer).state) == 3) {
                  return "${luz3}";
                }else {
                  return "${luz4}";
                }

 ########PAGINA LuzRGB########## 
  - platform: nextion
    name: $device_name Brightness Slider
    page_id: $pag_luzrgb
    component_id: 1
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(brightness_value).update();
        - delay: 50ms
        - homeassistant.service:
            service: light.turn_on
            data:
              entity_id: !lambda |-
                if ((int)(id(current_rgb).state) == 1) {
                  return "${luz1}";
                }else if ((int)(id(current_rgb).state) == 2) {
                  return "${luz2}";
                }else if ((int)(id(current_rgb).state) == 3) {
                  return "${luz3}";
                }else {
                  return "${luz4}";
                }
              brightness: !lambda 'return (int)id(brightness_value).state;'

  - platform: nextion
    name: $device_name Color Slider
    page_id: $pag_luzrgb
    component_id: 7
    internal: true
    on_release:
      then:
        - lambda: |-
            id(slider_aux) = true;
            id(red).update();
            id(green).update();
            id(blue).update();
        - delay: 50ms
        - homeassistant.service:
            service: script.rgbelson
            data:
              light_name: !lambda |-
                if ((int)(id(current_rgb).state) == 1) {
                  return "${luz1}";
                }else if ((int)(id(current_rgb).state) == 2) {
                  return "${luz2}";
                }else if ((int)(id(current_rgb).state) == 3) {
                  return "${luz3}";
                }else {
                  return "${luz4}";
                }
              red: !lambda 'return id(red).state;'
              green: !lambda 'return id(green).state;'
              blue: !lambda 'return id(blue).state;'

  - platform: nextion
    name: $device_name Color Temp Slider
    page_id: $pag_luzrgb
    component_id: 2
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(color_temp_value).update();
        - delay: 50ms
        - homeassistant.service:
            service: light.turn_on
            data:
              entity_id: !lambda |-
                if ((int)(id(current_rgb).state) == 1) {
                  return "${luz1}";
                }else if ((int)(id(current_rgb).state) == 2) {
                  return "${luz2}";
                }else if ((int)(id(current_rgb).state) == 3) {
                  return "${luz3}";
                }else {
                  return "${luz4}";
                }
              color_temp: !lambda 'return (int)id(color_temp_value).state;'

  - platform: nextion
    name: $device_name luz1 Button 1
    page_id: $pag_luzrgb
    component_id: 12
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: light.toggle
            data:
              entity_id: !lambda |-
                if ((int)(id(current_rgb).state) == 1) {
                  return "${luz1}";
                }else if ((int)(id(current_rgb).state) == 2) {
                  return "${luz2}";
                }else if ((int)(id(current_rgb).state) == 3) {
                  return "${luz3}";
                }else {
                  return "${luz4}";
                }   
 
 ########PAGINA TV##########
  - platform: nextion
    name: $device_name TV Source 1
    page_id: $pag_tv
    component_id: 1
    internal: true
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Home

  - platform: nextion
    name: $device_name TV Source 2
    page_id: $pag_tv
    component_id: 2
    internal: true
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Home

  - platform: nextion
    name: $device_name TV Source 3
    page_id: $pag_tv
    component_id: 3
    internal: true
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Home


  - platform: nextion
    name: $device_name TV Power Button
    page_id: $pag_tv
    component_id: 4
    internal: true
    on_press:
      then:
      - homeassistant.service:
            service: media_player.toggle
            data_template:
              entity_id: $tv1

  - platform: nextion
    name: $device_name TV Home Button
    page_id: $pag_tv
    internal: true
    component_id: 10
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Home

  - platform: nextion
    name: $device_name TV Back Button
    page_id: $pag_tv
    internal: true
    component_id: 11
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Back

  - platform: nextion
    name: $device_name TV Volume Up Button
    page_id: $pag_tv
    internal: true
    component_id: 14
    on_press:
      then:
      - homeassistant.service:
            service: media_player.volume_up
            data_template:
              entity_id: $tv1

  - platform: nextion
    name: $device_name TV Volume Down Button
    page_id: $pag_tv
    internal: true
    component_id: 13
    on_press:
      then:
      - homeassistant.service:
            service: media_player.volume_down
            data_template:
              entity_id: $tv1

  - platform: nextion
    name: $device_name TV Select Button
    page_id: $pag_tv
    internal: true
    component_id: 9
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: OK

  - platform: nextion
    name: $device_name TV Left Button
    page_id: $pag_tv
    internal: true
    component_id: 8
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Left Arrow

  - platform: nextion
    name: $device_name TV Right Button
    page_id: $pag_tv
    internal: true
    component_id: 6
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Right Arrow

  - platform: nextion
    name: $device_name TV Up Button
    page_id: $pag_tv
    internal: true
    component_id: 5
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Up Arrow

  - platform: nextion
    name: $device_name TV Down Button
    page_id: $pag_tv
    internal: true
    component_id: 7
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: Down Arrow

  - platform: nextion
    name: $device_name TV AppleTV Button
    page_id: $pag_tv
    internal: true
    component_id: 15
    on_press:
      then:
      - homeassistant.service:
            service: media_player.select_source
            data_template:
              entity_id: $tv1
              source: AppleTv
          
  - platform: nextion
    name: $device_name Volume Slider
    page_id: $pag_tv
    component_id: 12
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(media_music_slider).update();
        - delay: 50ms
        - homeassistant.service:
            service: media_player.volume_set
            data:
              entity_id: $spotify 
              volume_level: !lambda 'return id(media_music_slider).state/100;'
    
 ########PAGINA Musica########## 
  - platform: nextion
    name: $device_name Previous Track Button
    page_id: $pag_music
    component_id: 2
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.media_previous_track
            data:
              entity_id: $spotify
        
  - platform: nextion
    name: $device_name Play/Pause Button
    page_id: $pag_music
    component_id: 3
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.media_play_pause
            data:
              entity_id: $spotify

  - platform: nextion
    name: $device_name Next Track Button
    page_id: $pag_music
    component_id: 4
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.media_next_track
            data:
              entity_id: $spotify

  - platform: nextion
    name: $device_name Shuffle
    page_id: $pag_music
    component_id: 5
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.shuffle_set
            data:
              entity_id: $spotify
              shuffle: !lambda 'return id(media_shuffle).state == "1" ? false : true;'

  - platform: nextion
    name: $device_name Repeat
    page_id: $pag_music
    component_id: 6
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.repeat_set
            data:
              entity_id: $spotify
              repeat: !lambda |-
                if (id(media_repeat).state == "0") {
                  id(media_repeat).state = "1";
                  return "all";
                } else if (id(media_repeat).state == "1") {
                  id(media_repeat).state = "2";
                  return "one";
                } else {
                  id(media_repeat).state = "0";
                  return "off";
                }

  - platform: nextion
    name: $device_name Volume Slider
    page_id: $pag_music
    component_id: 7
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(media_music_slider).update();
        - delay: 50ms
        - homeassistant.service:
            service: media_player.volume_set
            data:
              entity_id: $spotify 
              volume_level: !lambda 'return id(media_music_slider).state/100;'

  - platform: nextion
    name: $device_name Progress Slider
    page_id: $pag_music
    component_id: 1
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(media_progress_slider).update();
        - delay: 50ms
        - homeassistant.service:
            service: media_player.media_seek
            data:
              entity_id: $spotify 
              seek_position: !lambda 'return id(media_progress_slider).state;'

 ########PAGINA Luzes########## 
  - platform: nextion
    name: $device_name Button 1
    page_id: $pag_luzes
    component_id: 5
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: light.toggle
            data_template:
              entity_id: $luz1

  - platform: nextion
    name: $device_name Button info 1
    page_id: $pag_luzes
    component_id: 13
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("LuzRGB.current.val=1");
            id(current_rgb).update();
            id(disp1).send_command_printf("page LuzRGB");

  - platform: nextion
    name: $device_name Button info 2
    page_id: $pag_luzes
    component_id: 14
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("LuzRGB.current.val=2");
            id(current_rgb).update();
            id(disp1).send_command_printf("page LuzRGB");

  - platform: nextion
    name: $device_name Button info 4
    page_id: $pag_luzes
    component_id: 16
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("LuzDimmer.current.val=4");
            id(current_dimmer).update();
            id(disp1).send_command_printf("page LuzDimmer");

  - platform: nextion
    name: $device_name Button 2
    page_id: $pag_luzes
    component_id: 6
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $luz2

  - platform: nextion
    name: $device_name Button 3
    page_id: $pag_luzes
    component_id: 7
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $luz3

  - platform: nextion
    name: $device_name Button 4
    page_id: $pag_luzes
    component_id: 15
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $luz4

  - platform: nextion
    name: $device_name Button 5
    page_id: $pag_luzes
    component_id: 12
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $luz5

 ########PAGINA Cenas##########
  - platform: nextion
    name: $device_name cena Button 1
    page_id: $pag_cenas
    component_id: 3
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template:
              entity_id: $cena1

  - platform: nextion
    name: $device_name cena Button 2
    page_id: $pag_cenas
    component_id: 4
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template:
              entity_id: $cena2
        
  - platform: nextion
    name: $device_name cena Button 3
    page_id: $pag_cenas
    component_id: 5
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template:
              entity_id: $cena3
          
  - platform: nextion
    name: $device_name cena Button 4
    page_id: $pag_cenas
    component_id: 6
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template:
              entity_id: $cena4

  - platform: nextion
    name: $device_name cena Button 5
    page_id: $pag_cenas
    component_id: 11
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template:
              entity_id: $cena5

 ########PAGINA Dispositivos##########
  - platform: nextion
    name: $device_name dispositivos Button 1
    page_id: $pag_dispositivos
    component_id: 3
    internal: true
    on_release:
      then:
        - rtttl.play: $barulho
        - if:
            condition:
              lambda: 'return id(ar1_current_mode).state == "0";'
            then:
              - homeassistant.service:
                  service: climate.turn_on
                  data_template:
                    entity_id: $ar1
            else:
              - homeassistant.service:
                  service: climate.turn_off
                  data_template:
                    entity_id: $ar1

  - platform: nextion
    name: $device_name dispositivos Button info 1
    page_id: $pag_dispositivos
    component_id: 13
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("Ar.current.val=1");
            id(current_ar).update();
            id(disp1).send_command_printf("page Ar");

  - platform: nextion
    name: $device_name dispositivos Button info 4
    page_id: $pag_dispositivos
    component_id: 15
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("Ar.current.val=2");
            id(current_ar).update();
            id(disp1).send_command_printf("page Ar");

  - platform: nextion
    name: $device_name dispositivos Button 2
    page_id: $pag_dispositivos
    component_id: 4
    internal: true
        
  - platform: nextion
    name: $device_name dispositivos Button 3
    page_id: $pag_dispositivos
    component_id: 5
    internal: true
    on_release:
      then:
        - rtttl.play: $barulho
               
  - platform: nextion
    name: $device_name dispositivos Button 4
    page_id: $pag_dispositivos
    component_id: 6
    internal: true

 ########PAGINA config##########
  - platform: nextion
    name: $device_name config brightness slider
    page_id: $pag_config
    component_id: 2
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(display_brightness_slider).update();
        - delay: 50ms
        - number.set:
            id: brightness
            value: !lambda 'return id(display_brightness_slider).state;'

  - platform: nextion
    name: $device_name config sleep screen on button 
    page_id: $pag_config
    component_id: 5
    internal: true
    on_release:
      then:
        - switch.turn_on: sleep_screen

  - platform: nextion
    name: $device_name config sleep screen off button 
    page_id: $pag_config
    component_id: 12
    internal: true
    on_release:
      then:
        - switch.turn_off: sleep_screen

  - platform: nextion
    name: $device_name config restart button
    page_id: $pag_config
    component_id: 6
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: button.press
            data_template:
              entity_id: $restart

  - platform: nextion
    name: $device_name config temporizador toggle button
    page_id: $pag_config
    component_id: 10
    internal: true
    on_release:
      then:
        - switch.toggle: temporizador

 ########PAGINA som##########
  - platform: nextion
    name: $device_name Toggle Receiver1 Button
    page_id: $pag_som
    component_id: 1
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("b%s.picc=29", id(som_current_receiver).state.c_str());
            id(disp1).send_command_printf("b%s.picc2=29",id(som_current_receiver).state.c_str());
            id(disp1).set_component_text_printf("som.receiver", "0");
            id(som_current_receiver).update();
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Toggle Receiver2 Button
    page_id: $pag_som
    component_id: 2
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("b%s.picc=29", id(som_current_receiver).state.c_str());
            id(disp1).send_command_printf("b%s.picc2=29",id(som_current_receiver).state.c_str());
            id(disp1).set_component_text_printf("som.receiver", "1");
            id(som_current_receiver).update();
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Toggle Receiver3 Button
    page_id: $pag_som
    component_id: 3
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("b%s.picc=29", id(som_current_receiver).state.c_str());
            id(disp1).send_command_printf("b%s.picc2=29",id(som_current_receiver).state.c_str());
            id(disp1).set_component_text_printf("som.receiver", "2");
            id(som_current_receiver).update();
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Toggle ReceiverAll Button
    page_id: $pag_som
    component_id: 4
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("b%s.picc=29", id(som_current_receiver).state.c_str());
            id(disp1).send_command_printf("b%s.picc2=29",id(som_current_receiver).state.c_str());
            id(disp1).set_component_text_printf("som.receiver", "3");
            id(som_current_receiver).update();
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Toggle Button
    page_id: $pag_som
    component_id: 5
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.toggle
            data:
              entity_id: !lambda |-
                if (id(som_current_receiver).state == "0") {
                  return "${receiver_zone_1}";
                } else if (id(som_current_receiver).state == "1") {
                  return "${receiver_zone_2}";
                } else if (id(som_current_receiver).state == "2") {
                  return "${receiver_zone_3}";
                } else {
                  return "media_player.receiver_teste1_2";
                }

  - platform: nextion
    name: $device_name Receiver Slider
    page_id: $pag_som
    component_id: 6
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(receiver_volume_slider).update();
        - delay: 50ms
        - homeassistant.service:
            service: media_player.volume_set
            data:
              entity_id: !lambda |-
                if (id(som_current_receiver).state == "0") {
                  return "${receiver_zone_1}";
                } else if (id(som_current_receiver).state == "1") {
                  return "${receiver_zone_2}";
                } else if (id(som_current_receiver).state == "2") {
                  return "${receiver_zone_3}";
                } else {
                  return "media_player.receiver_teste1_2";
                }
              volume_level: !lambda 'return id(receiver_volume_slider).state/100;'

  - platform: nextion
    name: $device_name Button source 1
    page_id: $pag_som
    component_id: 7
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.select_source
            data:
              entity_id: !lambda |-
                if (id(som_current_receiver).state == "0") {
                  return "${receiver_zone_1}";
                } else if (id(som_current_receiver).state == "1") {
                  return "${receiver_zone_2}";
                } else if (id(som_current_receiver).state == "2") {
                  return "${receiver_zone_3}";
                } else {
                  return "media_player.receiver_teste1_2";
                }
              source: 'projetor'
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Button source 2
    page_id: $pag_som
    component_id: 8
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.select_source
            data:
              entity_id: !lambda |-
                if (id(som_current_receiver).state == "0") {
                  return "${receiver_zone_1}";
                } else if (id(som_current_receiver).state == "1") {
                  return "${receiver_zone_2}";
                } else if (id(som_current_receiver).state == "2") {
                  return "${receiver_zone_3}";
                } else {
                  return "media_player.receiver_teste1_2";
                }
              source: 'appletv'
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Button source 3
    page_id: $pag_som
    component_id: 9
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.select_source
            data:
              entity_id: !lambda |-
                if (id(som_current_receiver).state == "0") {
                  return "${receiver_zone_1}";
                } else if (id(som_current_receiver).state == "1") {
                  return "${receiver_zone_2}";
                } else if (id(som_current_receiver).state == "2") {
                  return "${receiver_zone_3}";
                } else {
                  return "media_player.receiver_teste1_2";
                }
              source: 'tv'
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: $device_name Button source 4
    page_id: $pag_som
    component_id: 10
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: media_player.select_source
            data:
              entity_id: !lambda |-
                if (id(som_current_receiver).state == "0") {
                  return "${receiver_zone_1}";
                } else if (id(som_current_receiver).state == "1") {
                  return "${receiver_zone_2}";
                } else if (id(som_current_receiver).state == "2") {
                  return "${receiver_zone_3}";
                } else {
                  return "media_player.receiver_teste1_2";
                }
              source: 'btv'
        - delay: 50ms
        - script.execute: refresh

 ########PAGINA timeConfig##########
  - platform: nextion
    name: TimeConfig Liga relogio
    page_id: $pag_timeconfig
    component_id: 3
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("b%i.picc=35", (int)(id(timeConfig_state).state));
            id(disp1).send_command_printf("b%i.picc2=35",(int)(id(timeConfig_state).state));
            id(disp1).send_command_printf("TimeConfig.timeState.val=0");
            id(timeConfig_state).update();
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: TimeConfig Desliga relogio
    page_id: $pag_timeconfig
    component_id: 4
    internal: true
    on_release:
      then:
        - lambda: |-
            id(disp1).send_command_printf("b%i.picc=35", (int)(id(timeConfig_state).state));
            id(disp1).send_command_printf("b%i.picc2=35",(int)(id(timeConfig_state).state));
            id(disp1).send_command_printf("TimeConfig.timeState.val=1");
            id(timeConfig_state).update();
        - delay: 50ms
        - script.execute: refresh

  - platform: nextion
    name: TimeConfig horas plus button
    page_id: $pag_timeconfig
    component_id: 12
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: input_datetime.set_datetime
            data:
              entity_id: !lambda |-
                if (id(timeConfig_state).state == 0) {
                  return "${relogio_liga}";
                } else {
                  return "${relogio_desliga}";
                }
              time: !lambda |-
                std::string resultado = std::to_string(((int)(id(timeconfig_horas_slider).state)+1)%24) + ":" + std::to_string((int)(id(timeconfig_minutos_slider).state));
                return resultado;
        - delay: 50ms
        - lambda: !lambda |-
            id(timeconfig_horas_slider).update();

  - platform: nextion
    name: TimeConfig horas plus button
    page_id: $pag_timeconfig
    component_id: 13
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: input_datetime.set_datetime
            data:
              entity_id: !lambda |-
                if (id(timeConfig_state).state == 0) {
                  return "${relogio_liga}";
                } else {
                  return "${relogio_desliga}";
                }
              time: !lambda |-
                std::string resultado = std::to_string(((int)(id(timeconfig_horas_slider).state)-1+24)%24) + ":" + std::to_string((int)(id(timeconfig_minutos_slider).state));
                return resultado;
        - delay: 50ms
        - lambda: !lambda |-
            id(timeconfig_horas_slider).update();

  - platform: nextion
    name: TimeConfig horas plus button
    page_id: $pag_timeconfig
    component_id: 14
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: input_datetime.set_datetime
            data:
              entity_id: !lambda |-
                if (id(timeConfig_state).state == 0) {
                  return "${relogio_liga}";
                } else {
                  return "${relogio_desliga}";
                }
              time: !lambda |-
                std::string resultado = std::to_string((int)(id(timeconfig_horas_slider).state)) + ":" + std::to_string(((int)(id(timeconfig_minutos_slider).state)+1)%60);
                return resultado;
        - delay: 50ms
        - lambda: !lambda |-
            id(timeconfig_minutos_slider).update();

  - platform: nextion
    name: TimeConfig horas plus button
    page_id: $pag_timeconfig
    component_id: 15
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: input_datetime.set_datetime
            data:
              entity_id: !lambda |-
                if (id(timeConfig_state).state == 0) {
                  return "${relogio_liga}";
                } else {
                  return "${relogio_desliga}";
                }
              time: !lambda |-
                std::string resultado = std::to_string((int)(id(timeconfig_horas_slider).state)) + ":" + std::to_string(((int)(id(timeconfig_minutos_slider).state)-1+60)%60);
                return resultado;
        - delay: 50ms
        - lambda: !lambda |-
            id(timeconfig_minutos_slider).update();

  - platform: nextion
    name: $device_name hora Slider
    page_id: $pag_timeconfig
    component_id: 1
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(timeconfig_horas_slider).update();
        - delay: 50ms
        - homeassistant.service:
            service: input_datetime.set_datetime
            data:
              entity_id: !lambda |-
                if (id(timeConfig_state).state == 0) {
                  return "${relogio_liga}";
                } else {
                  return "${relogio_desliga}";
                }
              time: !lambda |-
                std::string resultado = std::to_string((int)(id(timeconfig_horas_slider).state)) + ":" + std::to_string((int)(id(timeconfig_minutos_slider).state));
                return resultado;

  - platform: nextion
    name: $device_name minuto Slider
    page_id: $pag_timeconfig
    component_id: 2
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(timeconfig_minutos_slider).update();
        - delay: 50ms
        - homeassistant.service:
            service: input_datetime.set_datetime
            data:
              entity_id: !lambda |-
                if (id(timeConfig_state).state == 0) {
                  return "${relogio_liga}";
                } else {
                  return "${relogio_desliga}";
                }
              time: !lambda |-
                std::string resultado = std::to_string((int)(id(timeconfig_horas_slider).state)) + ":" + std::to_string((int)(id(timeconfig_minutos_slider).state));
                return resultado;

   #     return id(timeconfig_horas_slider).state;

 ########PAGINA persiana########## 
  - platform: nextion
    name: $device_name persiana Slider
    page_id: $pag_persiana
    component_id: 1
    internal: true
    on_release:
      then:
        - lambda: !lambda |-
            id(slider_aux) = true;
            id(cover_position).update();
        - delay: 50ms
        - homeassistant.service:
            service: cover.set_cover_position
            data:
              entity_id: $persiana
              position: !lambda 'return (int)id(cover_position).state;'

  - platform: nextion
    name: $device_name persiana Button 1
    page_id: $pag_persiana
    component_id: 2
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: cover.close_cover
            data:
              entity_id: $persiana    

  - platform: nextion
    name: $device_name persiana Button 2
    page_id: $pag_persiana
    component_id: 3
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: cover.stop_cover
            data:
              entity_id: $persiana      

  - platform: nextion
    name: $device_name persiana Button 3
    page_id: $pag_persiana
    component_id: 4
    internal: true
    on_release:
      then:
        - homeassistant.service:
            service: cover.open_cover
            data:
              entity_id: $persiana       

sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_screensaver}").c_str())){
                id(disp1).set_component_text_printf("temp", "%.f""°", x);
              }

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 60s
    attenuation: 11db

  - platform: nextion
    nextion_id: disp1
    id: Nextion_isConnected
    name: "Nextion_isConnected"
    component_name: Config.brightsleep
    
 ########Sensor ar##########
  - platform: nextion
    id: current_ar
    component_name: Ar.current

 ########Sensor luzRGB##########
  - platform: nextion
    id: current_rgb
    component_name: LuzRGB.current

  - platform: nextion
    id: brightness_value
    component_name: brightnessVal
        
  - platform: nextion
    id: color_temp_value
    component_name: tempSlider

  ########Sensor Color Slider##########
  - platform: nextion
    id: red
    component_name: LuzRGB.red
            
  - platform: nextion
    id: green
    component_name: LuzRGB.green

  - platform: nextion
    id: blue
    component_name: LuzRGB.blue

 ########Sensor luzDimmer##########
  - platform: nextion
    id: current_dimmer
    component_name: LuzDimmer.current

  - platform: nextion
    id: brightness_value2
    component_name: brightnessVal2    

 ########Sensor painel##########
  - platform: nextion
    id: display_brightness
    component_name: Config.brightness

  - platform: nextion
    id: display_brightness_slider
    component_name: brightSlider

 ########Sensor timeConfig##########
  - platform: nextion
    id: timeConfig_state
    component_name: TimeConfig.timeState

  - platform: homeassistant
    id: relogio_liga_hora
    entity_id: $relogio_liga
    attribute: hour
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_timeconfig}").c_str())){
                if(id(timeConfig_state).state == 0){
                  id(disp1).send_command_printf("horasSlider.val=%i", (int)(x));
                  id(disp1).set_component_text_printf("t0", "%02i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: homeassistant
    id: relogio_liga_minuto
    entity_id: $relogio_liga
    attribute: minute
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_timeconfig}").c_str())){
                if(id(timeConfig_state).state == 0){
                  id(disp1).send_command_printf("minutosSlider.val=%i", (int)(x));
                  id(disp1).set_component_text_printf("t1", "%02i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: homeassistant
    id: relogio_desliga_hora
    entity_id: $relogio_desliga
    attribute: hour
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_timeconfig}").c_str())){
                if(id(timeConfig_state).state == 1){
                  id(disp1).send_command_printf("horasSlider.val=%i", (int)(x));
                  id(disp1).set_component_text_printf("t0", "%02i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: homeassistant
    id: relogio_desliga_minuto
    entity_id: $relogio_desliga
    attribute: minute
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_timeconfig}").c_str())){
                if(id(timeConfig_state).state == 1){
                  id(disp1).send_command_printf("minutosSlider.val=%i", (int)(x));
                  id(disp1).set_component_text_printf("t1", "%02i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: nextion
    id: timeconfig_horas_slider
    component_name: horasSlider

  - platform: nextion
    id: timeconfig_minutos_slider
    component_name: minutosSlider

 ########Sensor ar1##########
  - platform: homeassistant
    id: ar1_temperature
    entity_id: $ar1
    attribute: temperature
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 1){
                if(id(ar1_current_mode).state == "0"){
                  id(disp1).set_component_text_printf("targetTemp", "--");
                  id(disp1).send_command_printf("vis t0,0");
                }else{
                  id(disp1).set_component_text_printf("targetTemp", "%i""°", (int)x);
                  id(disp1).send_command_printf("vis t0,1");
                }
              }
            }

  - platform: homeassistant
    id: ar1_current_temperature
    entity_id: $ar1
    attribute: current_temperature
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 1){
                id(disp1).set_component_text_printf("currentTemp", "%i""°", (int)x);
              }
            }

 ########Sensor ar2##########
  - platform: homeassistant
    id: ar2_temperature
    entity_id: $ar2
    attribute: temperature
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 2){
                if(id(ar2_current_mode).state == "0"){
                  id(disp1).set_component_text_printf("targetTemp", "--");
                  id(disp1).send_command_printf("vis t0,0");
                }else{
                  id(disp1).set_component_text_printf("targetTemp", "%i""°", (int)x);
                  id(disp1).send_command_printf("vis t0,1");
                }
              }
            }

  - platform: homeassistant
    id: ar2_current_temperature
    entity_id: $ar2
    attribute: current_temperature
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 2){
                id(disp1).set_component_text_printf("currentTemp", "%i""°", (int)x);
              }
            }

 ########Sensor Luz4##########
  - platform: homeassistant
    id: luz4_current_brightness
    entity_id: $luz4 
    attribute: brightness
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("DEDO","%i",(int)((x/255)*100) );
            if(id(slider_aux) == false){
              if (!strcmp(id(current_page2).c_str(),to_string("${pag_luzdimmer}").c_str())){
                if ((int)(id(current_dimmer).state) == 4) {
                  id(disp1).send_command_printf("brightnessVal2.val=%i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

 ########Sensor Luz2##########
  - platform: homeassistant
    id: luz2_current_brightness
    entity_id: $luz2 
    attribute: brightness
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("DEDO","%i",(int)((x/255)*100) );
            if(id(slider_aux) == false){
              if (!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){
                if ((int)(id(current_rgb).state) == 2) {
                  id(disp1).send_command_printf("brightnessVal.val=%i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'
 

  - platform: homeassistant
    id: luz2_current_color_temp
    entity_id: $luz2
    attribute: color_temp
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){
                if ((int)(id(current_rgb).state) == 2) {
                  id(disp1).send_command_printf("tempSlider.val=%i", (int)x);
                }
              }
            }
        - delay: 200ms
        - lambda: 'id(slider_aux) = false;'
 
 ########Sensor Luz1##########
  - platform: homeassistant
    id: luz1_current_brightness
    entity_id: $luz1 
    attribute: brightness
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("DEDO","%i",(int)((x/255)*100) );
            if(id(slider_aux) == false){
              if (!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){
                if ((int)(id(current_rgb).state) == 1) {
                  id(disp1).send_command_printf("brightnessVal.val=%i", (int)x);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'
 

  - platform: homeassistant
    id: luz1_current_color_temp
    entity_id: $luz1
    attribute: color_temp
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){
                if ((int)(id(current_rgb).state) == 2) {
                  id(disp1).send_command_printf("tempSlider.val=%i", (int)x);
                }
              }
            }
        - delay: 200ms
        - lambda: 'id(slider_aux) = false;'

 ########Sensor Som##########
  - platform: homeassistant
    id: receiver1_volume
    entity_id: $receiver_zone_1
    attribute: volume_level
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
                if(id(som_current_receiver).state == "0"){
                  id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(x*100)));
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: homeassistant
    id: receiver2_volume
    entity_id: $receiver_zone_2
    attribute: volume_level
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
                if(id(som_current_receiver).state == "1"){
                  id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(x*100)));
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'
        
  - platform: homeassistant
    id: receiver3_volume
    entity_id: $receiver_zone_3
    attribute: volume_level
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
                if(id(som_current_receiver).state == "2"){
                  id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(x*100)));
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: nextion
    id: receiver_volume_slider
    component_name: VolumeLevel

 ########Sensor Musica##########
  - platform: homeassistant
    id: media_duration
    entity_id: $spotify
    attribute: media_duration
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
              id(disp1).send_command_printf("progressSlider.maxval=%i", ((int)x) ); //possivel +1
              int minuto = ((int)x)/60;
              int segundo = ((int)x)%60;
              ESP_LOGD("DEDO", "min:%i seg:%i",minuto,segundo);
              if(segundo < 10 && minuto < 10){
                id(disp1).set_component_text_printf("duration", "0%i"":""0%i", minuto,segundo);
              }else if(segundo < 10){
                id(disp1).set_component_text_printf("duration", "%i"":""0%i", minuto,segundo);
              }else if(minuto < 10){
                id(disp1).set_component_text_printf("duration", "0%i"":""%i", minuto,segundo);
              }
            }


  - platform: homeassistant
    id: media_volume
    entity_id: $spotify
    attribute: volume_level
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
                id(disp1).send_command_printf("MusicLevel.val=%i", ((int)(x*100)));
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: nextion
    id: media_music_slider
    component_name: MusicLevel
     #!lambda 'return id(media_source).state.c_str();'

  - platform: homeassistant
    id: media_position
    entity_id: $spotify
    attribute: media_position
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
                id(disp1).send_command_printf("progressSlider.val=%i", ((int)x) );
                int minuto = ((int)x)/60;
                int segundo = ((int)x)%60;
                ESP_LOGD("DEDO", "min:%i seg:%i",minuto,segundo);
                if(segundo < 10 && minuto < 10){
                  id(disp1).set_component_text_printf("tempo", "0%i"":""0%i", minuto,segundo);
                }else if(segundo < 10){
                  id(disp1).set_component_text_printf("tempo", "%i"":""0%i", minuto,segundo);
                }else if(minuto < 10){
                  id(disp1).set_component_text_printf("tempo", "0%i"":""%i", minuto,segundo);
                }
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'

  - platform: nextion
    id: media_progress_slider
    component_name: progressSlider

 ########Sensor persiana##########
  - platform: homeassistant
    id: current_position
    entity_id: $persiana
    attribute: current_position
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if (!strcmp(id(current_page2).c_str(),to_string("${pag_persiana}").c_str())){
                  id(disp1).send_command_printf("coverVal.val=%i", (int)x);
              }
            }
        - delay: 100ms
        - lambda: 'id(slider_aux) = false;'
 

  - platform: nextion
    id: cover_position
    component_name: coverVal

text_sensor:
 ########TxTSensor Data##########

  - platform: template
    name: "Dia da semana"
    internal: true
    id: week_day
    filters:
    - map:
      - 1 -> Domingo
      - 2 -> Segunda-feira
      - 3 -> Terça-feira
      - 4 -> Quarta-feira
      - 5 -> Quinta-feira
      - 6 -> Sexta-feira
      - 7 -> Sábado

  - platform: template
    name: "Mes"
    internal: true
    id: month
    filters:
    - map:
      - 1 -> Janeiro
      - 2 -> Fevereiro
      - 3 -> Março
      - 4 -> Abril
      - 5 -> Maio
      - 6 -> Junho
      - 7 -> Julho
      - 8 -> Agosto
      - 9 -> Setembro
      - 10 -> Outubro
      - 11 -> Novembro
      - 12 -> Dezembro

 ########TxTSensor Musica##########

  - platform: homeassistant
    id: media_shuffle
    entity_id: $spotify
    attribute: shuffle
    filters:
    - map:
      - on -> 1
      - off -> 0 
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
              id(disp1).send_command_printf("b3.picc=%i", 17 + atoi(x.c_str()));
              id(disp1).send_command_printf("b3.picc2=%i",17 + atoi(x.c_str()));
            }


  - platform: homeassistant
    id: media_state
    entity_id: $spotify
    filters:
    - lambda: |-
        if(!(!strcmp(x.c_str(),"playing") || !strcmp(x.c_str(),"paused"))){
          id(media_duration).publish_state(0.0);
          id(media_position).publish_state(0.0);
        }
        return x;
    - map:
      - playing -> 1
      - idle -> 0      
      - paused -> 0      
      - off -> 0      
      - standby -> 0      
      - unavailable -> 0      
      - unknown -> 0      
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
                id(disp1).send_command_printf("b1.picc=%i", 17 + atoi(x.c_str()));
                id(disp1).send_command_printf("b1.picc2=%i",18 - atoi(x.c_str()));
            }
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str())){
              id(disp1).send_command_printf("b2.picc=%i", 5 + atoi(x.c_str()));
              id(disp1).send_command_printf("b2.picc2=%i",5 + atoi(x.c_str()));
            }

  - platform: homeassistant
    id: media_repeat
    entity_id: $spotify
    attribute: repeat
    filters:
    - map:
      - off -> 0
      - all -> 1      
      - one -> 2      
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
                id(disp1).send_command_printf("b4.pic=%i", 19 + atoi(x.c_str()));
            }



  - platform: homeassistant
    id: media_source
    entity_id: $spotify
    attribute: source
    filters:
    - lambda: |-
        std::string text = x.c_str();
        std::replace(text.begin(), text.end(), ' ', '_');
        return text;
    - prepend: "media_player."


  - platform: homeassistant
    id: media_source_list
    entity_id: $spotify
    attribute: source_list

  - platform: homeassistant
    id: media_artist
    entity_id: $spotify
    attribute: media_artist
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
                id(disp1).set_component_text_printf("artista", "%s", x.c_str());
            }

  
  - platform: homeassistant
    id: media_title
    entity_id: $spotify
    attribute: media_title
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){
                id(disp1).set_component_text_printf("titulo", "%s", x.c_str());
            }

 ########TxTSensor Tv##########
  - platform: homeassistant
    id: tv_source
    entity_id: $tv1
    attribute: source
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_tv}").c_str())){
            }
 # a fazer

 ########TxTSensor Som##########

  - platform: nextion
    id: som_current_receiver
    component_name: som.receiver
    on_value:
          then:
            - lambda: |-
                if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
                  id(disp1).send_command_printf("b%s.picc=30", x.c_str());
                  id(disp1).send_command_printf("b%s.picc2=30",x.c_str());
                }

  - platform: homeassistant
    id: receiver_zone1_state
    entity_id: $receiver_zone_1
    filters:
    - map:
      - on -> 1
      - playing -> 1
      - idle -> 0      
      - paused -> 0      
      - off -> 0      
      - standby -> 0      
      - unavailable -> 0      
      - unknown -> 0      
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
              if(id(som_current_receiver).state == "0"){
                id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(x.c_str()));
                id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(x.c_str()));
              }
            }

  - platform: homeassistant
    id: receiver_zone1_source
    entity_id: $receiver_zone_1
    attribute: source
    filters:
    - map:
      - projetor -> 7
      - appletv -> 8
      - tv -> 9    
      - btv -> 10  
    on_value:
          then:
            - lambda: |-
                if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
                  if(id(som_current_receiver).state == "0"){
                    id(disp1).send_command_printf("b7.picc=%i", 29);
                    id(disp1).send_command_printf("b7.picc2=%i",29);
                    id(disp1).send_command_printf("b8.picc=%i", 29);
                    id(disp1).send_command_printf("b8.picc2=%i",29);
                    id(disp1).send_command_printf("b9.picc=%i", 29);
                    id(disp1).send_command_printf("b9.picc2=%i",29);
                    id(disp1).send_command_printf("b10.picc=%i", 29);
                    id(disp1).send_command_printf("b10.picc2=%i",29);
                    id(disp1).send_command_printf("b%s.picc=30", x.c_str());
                    id(disp1).send_command_printf("b%s.picc2=30",x.c_str());
                  }
                }

  - platform: homeassistant
    id: receiver_zone2_state
    entity_id: $receiver_zone_2
    filters:
    - map:
      - on -> 1
      - playing -> 1
      - idle -> 0      
      - paused -> 0      
      - off -> 0      
      - standby -> 0      
      - unavailable -> 0      
      - unknown -> 0      
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
              if(id(som_current_receiver).state == "1"){
                id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(x.c_str()));
                id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(x.c_str()));
              }
            }

  - platform: homeassistant
    id: receiver_zone2_source
    entity_id: $receiver_zone_2
    attribute: source
    filters:
    - map:
      - projetor -> 7
      - appletv -> 8
      - tv -> 9    
      - btv -> 10  
    on_value:
          then:
            - lambda: |-
                if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
                  if(id(som_current_receiver).state == "1"){
                    id(disp1).send_command_printf("b7.picc=%i", 29);
                    id(disp1).send_command_printf("b7.picc2=%i",29);
                    id(disp1).send_command_printf("b8.picc=%i", 29);
                    id(disp1).send_command_printf("b8.picc2=%i",29);
                    id(disp1).send_command_printf("b9.picc=%i", 29);
                    id(disp1).send_command_printf("b9.picc2=%i",29);
                    id(disp1).send_command_printf("b10.picc=%i", 29);
                    id(disp1).send_command_printf("b10.picc2=%i",29);
                    id(disp1).send_command_printf("b%s.picc=30", x.c_str());
                    id(disp1).send_command_printf("b%s.picc2=30",x.c_str());
                  }
                }

  - platform: homeassistant
    id: receiver_zone3_state
    entity_id: $receiver_zone_3
    filters:
    - map:
      - on -> 1
      - playing -> 1
      - idle -> 0      
      - paused -> 0      
      - off -> 0      
      - standby -> 0      
      - unavailable -> 0      
      - unknown -> 0      
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){
              if(id(som_current_receiver).state == "2"){
                id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(x.c_str()));
                id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(x.c_str()));
              }
            }

 ########TxTSensor luz3##########
  - platform: homeassistant
    id: luz3
    entity_id: $luz3
    filters:
    - map:
      - on -> 1
      - off -> 0
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
                id(disp1).send_command_printf("b3.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b3.picc2=%i",atoi(x.c_str()));
            }   

 ########TxTSensor luz2##########
  - platform: homeassistant
    id: luz2
    entity_id: $luz2
    filters:
    - map:
      - on -> 1
      - off -> 0
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){ 
              if((int)(id(current_rgb).state) == 2){
                id(disp1).send_command_printf("b0.picc=%i",8 + atoi(x.c_str()));
                id(disp1).send_command_printf("b0.picc2=%i",8 + atoi(x.c_str()));
              }
            }
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
                id(disp1).send_command_printf("b2.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b2.picc2=%i",atoi(x.c_str()));
                id(disp1).send_command_printf("b2info.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b2info.picc2=%i",atoi(x.c_str()));
            }

  - platform: homeassistant
    id: luz2_current_brightness_rgb
    entity_id: $luz2
    attribute: rgb_color
    filters:
    - substitute:
      - "( -> "
      - ") -> "
    - lambda: |-
        char delim[] = ", ";
        char *ptr = strtok((char*)x.c_str(), delim);
        char rgb[3][4];
        int i=0;
        while(ptr != NULL){
          strcpy(rgb[i],ptr);
          i++;
          ptr = strtok(NULL, delim);
        }
        int r = atoi(rgb[0]);
        int g = atoi(rgb[1]);
        int b = atoi(rgb[2]);
        int nextion = (r/8)*2048 + (g/4)*32 + (b/8);
        char str[6];
        sprintf(str, "%d", nextion);
        return {str};

  - platform: homeassistant
    id: luz2_current_brightness_rgb_slider
    entity_id: $luz2
    attribute: rgb_color
    filters:
    - substitute:
      - "( -> "
      - ") -> "
    - lambda: |-
        char delim[] = ", ";
        char *ptr = strtok((char*)x.c_str(), delim);
        char rgb[3][4];
        int i=0;
        while(ptr != NULL){
          strcpy(rgb[i],ptr);
          i++;
          ptr = strtok(NULL, delim);
        }
        int r = atoi(rgb[0]);
        int g = atoi(rgb[1]);
        int b = atoi(rgb[2]);

        char str[6];
    
        if(r < g && r < b){
          if(g >= b){
            sprintf(str, "%d", b+510);
          }else{
            sprintf(str, "%d", 1020-g);
          }
        }else if(g < b){
          if(b >= r){
            sprintf(str, "%d", 1020+r);
          }else{
            sprintf(str, "%d", 1529-b);
          }
        }else{
          if(r >= g){
            sprintf(str, "%d", g);
          }else{
            sprintf(str, "%d", 510-r);
          }
        }
        return {str};  
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){ 
                if((int)(id(current_rgb).state) == 2){
                  id(disp1).send_command_printf("colorSlider.val=%s", x.c_str());
                }
              }
            }
        - delay: 200ms
        - lambda: 'id(slider_aux) = false;'
            
 ########TxTSensor luz4##########
  - platform: homeassistant
    id: luz4
    entity_id: $luz4
    filters:
    - map:
      - on -> 1
      - off -> 0
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzdimmer}").c_str())){
              if((int)(id(current_dimmer).state) == 4){ 
                id(disp1).send_command_printf("b0.picc=%i",23 + atoi(x.c_str()));
                id(disp1).send_command_printf("b0.picc2=%i",23 + atoi(x.c_str()));
              }
            }
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
                id(disp1).send_command_printf("b4.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b4.picc2=%i",atoi(x.c_str()));
            } 

 ########TxTSensor luzMaster##########
  - platform: homeassistant
    id: luzMaster
    entity_id: $luz5
    filters:
    - map:
      - on -> 1
      - off -> 0
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
                id(disp1).send_command_printf("b5.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b5.picc2=%i",atoi(x.c_str()));
            }   
    
 ########TxTSensor luz1##########
  - platform: homeassistant
    id: luz1
    entity_id: $luz1
    filters:
    - map:
      - on -> 1
      - off -> 0
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){
              if((int)(id(current_rgb).state) == 1){
                id(disp1).send_command_printf("b0.picc=%i",8 + atoi(x.c_str()));
                id(disp1).send_command_printf("b0.picc2=%i",8 + atoi(x.c_str()));
              }
            }
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
                id(disp1).send_command_printf("b1.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b1.picc2=%i",atoi(x.c_str()));
                id(disp1).send_command_printf("b1info.picc=%i", atoi(x.c_str()));
                id(disp1).send_command_printf("b1info.picc2=%i",atoi(x.c_str()));
            }

  - platform: homeassistant
    id: luz1_current_brightness_rgb
    entity_id: $luz1
    attribute: rgb_color
    filters:
    - substitute:
      - "( -> "
      - ") -> "
    - lambda: |-
        char delim[] = ", ";
        char *ptr = strtok((char*)x.c_str(), delim);
        char rgb[3][4];
        int i=0;
        while(ptr != NULL){
          strcpy(rgb[i],ptr);
          i++;
          ptr = strtok(NULL, delim);
        }
        int r = atoi(rgb[0]);
        int g = atoi(rgb[1]);
        int b = atoi(rgb[2]);
        int nextion = (r/8)*2048 + (g/4)*32 + (b/8);
        char str[6];
        sprintf(str, "%d", nextion);
        return {str};

  - platform: homeassistant
    id: luz1_current_brightness_rgb_slider
    entity_id: $luz1 
    attribute: rgb_color
    filters:
    - substitute:
      - "( -> "
      - ") -> "
    - lambda: |-
        char delim[] = ", ";
        char *ptr = strtok((char*)x.c_str(), delim);
        char rgb[3][4];
        int i=0;
        while(ptr != NULL){
          strcpy(rgb[i],ptr);
          i++;
          ptr = strtok(NULL, delim);
        }
        int r = atoi(rgb[0]);
        int g = atoi(rgb[1]);
        int b = atoi(rgb[2]);

        char str[6];
        if(r < g && r < b){
          if(g >= b){
            sprintf(str, "%d", b+510);
          }else{
            sprintf(str, "%d", 1020-g);
          }
        }else if(g < b){
          if(b >= r){
            sprintf(str, "%d", 1020+r);
          }else{
            sprintf(str, "%d", 1529-b);
          }
        }else{
          if(r >= g){
            sprintf(str, "%d", g);
          }else{
            sprintf(str, "%d", 510-r);
          }
        }
        return {str};  
    on_value:
      then:
        - lambda: |-
            if(id(slider_aux) == false){
              if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){ 
                if((int)(id(current_rgb).state) == 1){
                  id(disp1).send_command_printf("colorSlider.val=%s", x.c_str());
                }
              }
            }
        - delay: 200ms
        - lambda: 'id(slider_aux) = false;'

 ########TxTSensor ar1##########
  - platform: homeassistant
    id: ar1_current_mode
    entity_id: $ar1
    filters:
      - map:
        - off -> 0
        - heat_cool -> auto #autoActive
        - cool -> cool #coolActive
        - dry -> humidity #dryActive
        - fan_only -> fan #fanActive
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 1){
                id(disp1).send_command_printf("auto.picc=11");
                id(disp1).send_command_printf("auto.picc2=11");
                id(disp1).send_command_printf("cool.picc=11");
                id(disp1).send_command_printf("cool.picc2=11");
                id(disp1).send_command_printf("humidity.picc=11");
                id(disp1).send_command_printf("humidity.picc2=11");
                id(disp1).send_command_printf("fan.picc=11");
                id(disp1).send_command_printf("fan.picc2=11");
                if(x=="0"){
                  id(disp1).send_command_printf("vis fanSpeed,0");
                  id(disp1).send_command_printf("vis t0,0");
                  id(disp1).set_component_text_printf("targetTemp", "--");
                  id(disp1).send_command_printf("power.picc=11");
                  id(disp1).send_command_printf("power.picc2=11");
                }else{
                  id(disp1).send_command_printf("vis fanSpeed,1");
                  id(disp1).send_command_printf("vis t0,1");
                  id(disp1).set_component_text_printf("targetTemp", "%i""°", (int)id(ar1_temperature).state);
                  id(disp1).send_command_printf("%s.picc=12",x.c_str());
                  id(disp1).send_command_printf("%s.picc2=12",x.c_str());
                  id(disp1).send_command_printf("power.picc=12");
                  id(disp1).send_command_printf("power.picc2=12");
                }
              }
            }
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str())){
              if(x=="0"){
                id(disp1).send_command_printf("b0.picc=4");
                id(disp1).send_command_printf("b0.picc2=4");
                id(disp1).send_command_printf("b0info.picc=4");
                id(disp1).send_command_printf("b0info.picc2=4");
              }else{
                id(disp1).send_command_printf("b0.picc=5");
                id(disp1).send_command_printf("b0.picc2=5");
                id(disp1).send_command_printf("b0info.picc=5");
                id(disp1).send_command_printf("b0info.picc2=5");
              }
            }


  - platform: homeassistant
    id: ar1_fan_speed
    entity_id: $ar1
    attribute: fan_mode
    filters:
      - map:
        - low -> 1
        - medium -> 2
        - high -> 3
        - auto -> 4
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 1){
                if (x == "1") {
                  id(disp1).send_command_printf("fanSpeed.pic=14");
                  id(disp1).send_command_printf("fanSpeed.pic2=14");
                } else if (x == "2") {
                  id(disp1).send_command_printf("fanSpeed.pic=15");
                  id(disp1).send_command_printf("fanSpeed.pic2=15");
                } else if (x == "3") {
                  id(disp1).send_command_printf("fanSpeed.pic=16");
                  id(disp1).send_command_printf("fanSpeed.pic2=16");
                } else if (x == "4") {
                  id(disp1).send_command_printf("fanSpeed.pic=13");
                  id(disp1).send_command_printf("fanSpeed.pic2=13");
                }
              }
            }

 ########TxTSensor ar2##########
  - platform: homeassistant
    id: ar2_current_mode
    entity_id: $ar2
    filters:
      - map:
        - off -> 0
        - heat_cool -> auto #autoActive
        - cool -> cool #coolActive
        - dry -> humidity #dryActive
        - fan_only -> fan #fanActive
    on_value:
      then:
        - lambda: |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 2){
                id(disp1).send_command_printf("auto.picc=11");
                id(disp1).send_command_printf("auto.picc2=11");
                id(disp1).send_command_printf("cool.picc=11");
                id(disp1).send_command_printf("cool.picc2=11");
                id(disp1).send_command_printf("humidity.picc=11");
                id(disp1).send_command_printf("humidity.picc2=11");
                id(disp1).send_command_printf("fan.picc=11");
                id(disp1).send_command_printf("fan.picc2=11");
                if(x=="0"){
                  id(disp1).send_command_printf("vis fanSpeed,0");
                  id(disp1).send_command_printf("vis t0,0");
                  id(disp1).set_component_text_printf("targetTemp", "--");
                  id(disp1).send_command_printf("power.picc=11");
                  id(disp1).send_command_printf("power.picc2=11");
                }else{
                  id(disp1).send_command_printf("vis fanSpeed,1");
                  id(disp1).send_command_printf("vis t0,1");
                  id(disp1).set_component_text_printf("targetTemp", "%i""°", (int)id(ar2_temperature).state);
                  id(disp1).send_command_printf("%s.picc=12",x.c_str());
                  id(disp1).send_command_printf("%s.picc2=12",x.c_str());
                  id(disp1).send_command_printf("power.picc=12");
                  id(disp1).send_command_printf("power.picc2=12");
                }
              }
            }
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str())){
              if(x=="0"){
                id(disp1).send_command_printf("b4.picc=4");
                id(disp1).send_command_printf("b4.picc2=4");
                id(disp1).send_command_printf("b4info.picc=4");
                id(disp1).send_command_printf("b4info.picc2=4");
              }else{
                id(disp1).send_command_printf("b4.picc=5");
                id(disp1).send_command_printf("b4.picc2=5");
                id(disp1).send_command_printf("b4info.picc=5");
                id(disp1).send_command_printf("b4info.picc2=5");
              }
            }


  - platform: homeassistant
    id: ar2_fan_speed
    entity_id: $ar2
    attribute: fan_mode
    filters:
      - map:
        - low -> 1
        - medium -> 2
        - high -> 3
        - auto -> 4
    on_value:
      then:
        - lambda: !lambda |-
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){
              if((int)(id(current_ar).state) == 2){
                if (x == "1") {
                  id(disp1).send_command_printf("fanSpeed.pic=14");
                  id(disp1).send_command_printf("fanSpeed.pic2=14");
                } else if (x == "2") {
                  id(disp1).send_command_printf("fanSpeed.pic=15");
                  id(disp1).send_command_printf("fanSpeed.pic2=15");
                } else if (x == "3") {
                  id(disp1).send_command_printf("fanSpeed.pic=16");
                  id(disp1).send_command_printf("fanSpeed.pic2=16");
                } else if (x == "4") {
                  id(disp1).send_command_printf("fanSpeed.pic=13");
                  id(disp1).send_command_printf("fanSpeed.pic2=13");
                }
              }
            }


# Define some outputs
switch:
  # The two relays
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
    on_turn_on:
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_cenas}").c_str())){
            id(disp1).send_command_printf("leftButton.picc=1");
            id(disp1).send_command_printf("leftButton.picc2=1");
          }
    on_turn_off:  
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_cenas}").c_str())){
            id(disp1).send_command_printf("leftButton.picc=0");
            id(disp1).send_command_printf("leftButton.picc2=0");
          }
      

  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19
    on_turn_on:
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_cenas}").c_str())){
            id(disp1).send_command_printf("rightButton.picc=1");
            id(disp1).send_command_printf("rightButton.picc2=1");
          }
    on_turn_off:
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_cenas}").c_str())){
            id(disp1).send_command_printf("rightButton.picc=0");
            id(disp1).send_command_printf("rightButton.picc2=0");
          }

  - platform: template
    name: $device_name Nextion inited
    id: nextion_init
    entity_category: config
    assumed_state: false
    optimistic: true

  - platform: template
    name: $device_name sleep_screen
    id: sleep_screen
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF 
    assumed_state: false
    optimistic: true
    on_turn_on:
      - lambda: |-
          id(disp1).send_command_printf("Config.brightsleep.val=1");
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_config}").c_str())){
            id(disp1).send_command_printf("b0.picc=27");
            id(disp1).send_command_printf("b0.picc2=27");
            id(disp1).send_command_printf("b1.picc=26");
            id(disp1).send_command_printf("b1.picc2=26");
          }        
    on_turn_off:
      - lambda: |-
          id(disp1).send_command_printf("Config.brightsleep.val=0");
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_config}").c_str())){
            id(disp1).send_command_printf("b0.picc=26");
            id(disp1).send_command_printf("b0.picc2=26");
            id(disp1).send_command_printf("b1.picc=27");
            id(disp1).send_command_printf("b1.picc2=27");
          }         

  - platform: template
    name: $device_name temporizador
    id: temporizador
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON 
    assumed_state: false
    optimistic: true
    on_turn_on:
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_config}").c_str())){
            id(disp1).send_command_printf("b2.picc=27");
            id(disp1).send_command_printf("b2.picc2=27");
            id(disp1).send_command_printf("b2info.picc=27");
            id(disp1).send_command_printf("b2info.picc2=27");
          }        
    on_turn_off:
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_config}").c_str())){
            id(disp1).send_command_printf("b2.picc=26");
            id(disp1).send_command_printf("b2.picc2=26");
            id(disp1).send_command_printf("b2info.picc=26");
            id(disp1).send_command_printf("b2info.picc2=26");
          }         

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

number:
  platform: template
  name: $device_name Brightness
  id: brightness
  #entity_category: config
  unit_of_measurement: '%'
  min_value: 0
  max_value: 100
  step: 1
  #initial_value: 30
  restore_value: true
  optimistic: true
  set_action:
    then:
      - lambda: |-
          id(disp1).send_command_printf("Config.brightness.val=%i",(int)x);
          id(disp1).send_command_printf("dim=%i",(int)x);
          if(id(slider_aux) == false){
            if(!strcmp(id(current_page2).c_str(),to_string("${pag_config}").c_str())){
              id(disp1).send_command_printf("brightSlider.val=%i", (int)x);
            }
          }
      - delay: 100ms
      - lambda: 'id(slider_aux) = false;'

script:
  - id: refresh
    then:
      - lambda: |-
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str()) || !strcmp(id(current_page2).c_str(),to_string("${pag_cenas}").c_str())){
            if (id(relay_1).state == 1) {
              id(disp1).send_command_printf("leftButton.picc=1");
              id(disp1).send_command_printf("leftButton.picc2=1");
            } else {
              id(disp1).send_command_printf("leftButton.picc=0");
              id(disp1).send_command_printf("leftButton.picc2=0");
            }  
            if (id(relay_2).state == 1) {
              id(disp1).send_command_printf("rightButton.picc=1");
              id(disp1).send_command_printf("rightButton.picc2=1");
            } else {
              id(disp1).send_command_printf("rightButton.picc=0");
              id(disp1).send_command_printf("rightButton.picc2=0");
            }  
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_ar}").c_str())){// Ar page
            id(disp1).send_command_printf("auto.picc=11");
            id(disp1).send_command_printf("auto.picc2=11");
            id(disp1).send_command_printf("cool.picc=11");
            id(disp1).send_command_printf("cool.picc2=11");
            id(disp1).send_command_printf("humidity.picc=11");
            id(disp1).send_command_printf("humidity.picc2=11");
            id(disp1).send_command_printf("fan.picc=11");
            id(disp1).send_command_printf("fan.picc2=11");
            id(disp1).send_command_printf("power.picc=11");
            id(disp1).send_command_printf("power.picc2=11");

            if((int)(id(current_ar).state) == 1){
              id(disp1).set_component_text_printf("currentTemp", "%i""°", (int)id(ar1_current_temperature).state);
              if (id(ar1_current_mode).state == "0") {
                id(disp1).set_component_text_printf("targetTemp", "--");
              } else {
                id(disp1).send_command_printf("vis fanSpeed,1");
                id(disp1).send_command_printf("vis t0,1");
                id(disp1).set_component_text_printf("targetTemp", "%i""°", (int)id(ar1_temperature).state);
                id(disp1).send_command_printf("power.picc=12");
                id(disp1).send_command_printf("power.picc2=12");
                id(disp1).send_command_printf("%s.picc=12",id(ar1_current_mode).state.c_str());
                id(disp1).send_command_printf("%s.picc2=12",id(ar1_current_mode).state.c_str());
              }
              if (id(ar1_fan_speed).state == "1") {
                id(disp1).send_command_printf("fanSpeed.pic=14");
                id(disp1).send_command_printf("fanSpeed.pic2=14");
              } else if (id(ar1_fan_speed).state == "2") {
                id(disp1).send_command_printf("fanSpeed.pic=15");
                id(disp1).send_command_printf("fanSpeed.pic2=15");
              } else if (id(ar1_fan_speed).state == "3") {
                id(disp1).send_command_printf("fanSpeed.pic=16");
                id(disp1).send_command_printf("fanSpeed.pic2=16");
              } else if (id(ar1_fan_speed).state == "4") {
                id(disp1).send_command_printf("fanSpeed.pic=13");
                id(disp1).send_command_printf("fanSpeed.pic2=13");
              }
            }else{
              id(disp1).set_component_text_printf("currentTemp", "%i""°", (int)id(ar2_current_temperature).state);
              if (id(ar2_current_mode).state == "0") {
                id(disp1).set_component_text_printf("targetTemp", "--");
              } else {
                id(disp1).send_command_printf("vis fanSpeed,1");
                id(disp1).send_command_printf("vis t0,1");
                id(disp1).set_component_text_printf("targetTemp", "%i""°", (int)id(ar2_temperature).state);
                id(disp1).send_command_printf("power.picc=12");
                id(disp1).send_command_printf("power.picc2=12");
                id(disp1).send_command_printf("%s.picc=12",id(ar2_current_mode).state.c_str());
                id(disp1).send_command_printf("%s.picc2=12",id(ar2_current_mode).state.c_str());
              }
              if (id(ar2_fan_speed).state == "1") {
                id(disp1).send_command_printf("fanSpeed.pic=14");
                id(disp1).send_command_printf("fanSpeed.pic2=14");
              } else if (id(ar2_fan_speed).state == "2") {
                id(disp1).send_command_printf("fanSpeed.pic=15");
                id(disp1).send_command_printf("fanSpeed.pic2=15");
              } else if (id(ar2_fan_speed).state == "3") {
                id(disp1).send_command_printf("fanSpeed.pic=16");
                id(disp1).send_command_printf("fanSpeed.pic2=16");
              } else if (id(ar2_fan_speed).state == "4") {
                id(disp1).send_command_printf("fanSpeed.pic=13");
                id(disp1).send_command_printf("fanSpeed.pic2=13");
              }
            }
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_persiana}").c_str())){// 
            id(disp1).send_command_printf("coverVal.val=%i", (int)id(current_position).state);
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_luzrgb}").c_str())){// RGB page
            if((int)(id(current_rgb).state) == 1){
              id(disp1).send_command_printf("brightnessVal.val=%i", (int)id(luz1_current_brightness).state);
              id(disp1).send_command_printf("tempSlider.val=%i", (int)id(luz1_current_color_temp).state);
              id(disp1).send_command_printf("colorSlider.val=%s", !strcmp(id(luz1_current_brightness_rgb_slider).state.c_str(),to_string("").c_str()) ? "249" : id(luz1_current_brightness_rgb_slider).state.c_str());
              id(disp1).send_command_printf("b0.picc=%i", 8 + atoi(id(luz1).state.c_str()));
              id(disp1).send_command_printf("b0.picc2=%i",8 + atoi(id(luz1).state.c_str()));
            }else if((int)(id(current_rgb).state) == 2){
              id(disp1).send_command_printf("brightnessVal.val=%i", (int)id(luz2_current_brightness).state);
              id(disp1).send_command_printf("tempSlider.val=%i", (int)id(luz2_current_color_temp).state);
              id(disp1).send_command_printf("colorSlider.val=%s", !strcmp(id(luz2_current_brightness_rgb_slider).state.c_str(),to_string("").c_str()) ? "249" : id(luz2_current_brightness_rgb_slider).state.c_str());
              id(disp1).send_command_printf("b0.picc=%i", 8 + atoi(id(luz2).state.c_str()));
              id(disp1).send_command_printf("b0.picc2=%i",8 + atoi(id(luz2).state.c_str()));
            }else if((int)(id(current_rgb).state) == 3){

            }else if((int)(id(current_rgb).state) == 4){
              
            }
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_luzdimmer}").c_str())){//
            if((int)(id(current_dimmer).state) == 4){ 
              id(disp1).send_command_printf("brightnessVal2.val=%i", (int)id(luz4_current_brightness).state);
              id(disp1).send_command_printf("b0.picc=%i", 23 + atoi(id(luz4).state.c_str()));
              id(disp1).send_command_printf("b0.picc2=%i",23 + atoi(id(luz4).state.c_str()));
            }else if((int)(id(current_dimmer).state) == 2){

            }else if((int)(id(current_dimmer).state) == 3){

            }else if((int)(id(current_dimmer).state) == 4){

            }
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_dispositivos}").c_str())){// Music page
            id(disp1).send_command_printf("b2.picc=%i", 4 + atoi(id(media_state).state.c_str()));
            id(disp1).send_command_printf("b2.picc2=%i",4 + atoi(id(media_state).state.c_str()));
            if(id(ar1_current_mode).state == "0"){
              id(disp1).send_command_printf("b0.picc=4");
              id(disp1).send_command_printf("b0.picc2=4");
              id(disp1).send_command_printf("b0info.picc=4");
              id(disp1).send_command_printf("b0info.picc2=4");
            }else{
              id(disp1).send_command_printf("b0.picc=5");
              id(disp1).send_command_printf("b0.picc2=5");
              id(disp1).send_command_printf("b0info.picc=5");
              id(disp1).send_command_printf("b0info.picc2=5");
            }
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_som}").c_str())){// Som page
            id(disp1).send_command_printf("b7.picc=%i", 29);
            id(disp1).send_command_printf("b7.picc2=%i",29);
            id(disp1).send_command_printf("b8.picc=%i", 29);
            id(disp1).send_command_printf("b8.picc2=%i",29);
            id(disp1).send_command_printf("b9.picc=%i", 29);
            id(disp1).send_command_printf("b9.picc2=%i",29);
            id(disp1).send_command_printf("b10.picc=%i", 29);
            id(disp1).send_command_printf("b10.picc2=%i",29);
            id(disp1).send_command_printf("b%s.picc=30", id(som_current_receiver).state.c_str());
            id(disp1).send_command_printf("b%s.picc2=30",id(som_current_receiver).state.c_str());
            if(id(som_current_receiver).state == "0"){
              id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(id(receiver_zone1_state).state.c_str()));
              id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(id(receiver_zone1_state).state.c_str()));
              id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(id(receiver1_volume).state*100)));
              id(disp1).send_command_printf("b%s.picc=30", id(receiver_zone1_source).state.c_str());
              id(disp1).send_command_printf("b%s.picc2=30",id(receiver_zone1_source).state.c_str());
            }else if(id(som_current_receiver).state == "1"){
              id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(id(receiver_zone2_state).state.c_str()));
              id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(id(receiver_zone2_state).state.c_str()));
              id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(id(receiver2_volume).state*100)));
              id(disp1).send_command_printf("b%s.picc=30", id(receiver_zone2_source).state.c_str());
              id(disp1).send_command_printf("b%s.picc2=30",id(receiver_zone2_source).state.c_str());
            }else if(id(som_current_receiver).state == "2"){
              id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(id(receiver_zone3_state).state.c_str()));
              id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(id(receiver_zone3_state).state.c_str()));
              id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(id(receiver3_volume).state*100)));
            }else{
              id(disp1).send_command_printf("b5.picc=%i", 29 + atoi(id(receiver_zone1_state).state.c_str()));
              id(disp1).send_command_printf("b5.picc2=%i",29 + atoi(id(receiver_zone1_state).state.c_str()));
              id(disp1).send_command_printf("VolumeLevel.val=%i", ((int)(id(receiver1_volume).state*100)));
            }
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_music}").c_str())){// Music page
            id(disp1).set_component_text_printf("titulo", "%s", id(media_title).state.c_str());
            id(disp1).set_component_text_printf("artista", "%s", id(media_artist).state.c_str());
            id(disp1).send_command_printf("b3.picc=%i", 17 + atoi(id(media_shuffle).state.c_str()));
            id(disp1).send_command_printf("b3.picc2=%i",17 + atoi(id(media_shuffle).state.c_str()));
            id(disp1).send_command_printf("b1.picc=%i", 17 + atoi(id(media_state).state.c_str()));
            id(disp1).send_command_printf("b1.picc2=%i",18 - atoi(id(media_state).state.c_str()));
            id(disp1).send_command_printf("progressSlider.maxval=%i", ((int)id(media_duration).state) );
            int minuto = ((int)id(media_duration).state)/60;
            int segundo = ((int)id(media_duration).state)%60;
            if(segundo < 10 && minuto < 10){
              id(disp1).set_component_text_printf("duration", "0%i"":""0%i", minuto,segundo);
            }else if(segundo < 10){
              id(disp1).set_component_text_printf("duration", "%i"":""0%i", minuto,segundo);
            }else if(minuto < 10){
              id(disp1).set_component_text_printf("duration", "0%i"":""%i", minuto,segundo);
            }
            minuto = ((int)id(media_position).state)/60;
            segundo = ((int)id(media_position).state)%60;
            ESP_LOGD("DEDO", "min:%i seg:%i",minuto,segundo);
            if(segundo < 10 && minuto < 10){
              id(disp1).set_component_text_printf("tempo", "0%i"":""0%i", minuto,segundo);
            }else if(segundo < 10){
              id(disp1).set_component_text_printf("tempo", "%i"":""0%i", minuto,segundo);
            }else if(minuto < 10){
              id(disp1).set_component_text_printf("tempo", "0%i"":""%i", minuto,segundo);
            }
            id(disp1).send_command_printf("MusicLevel.val=%i", ((int)(id(media_volume).state*100)));
            id(disp1).send_command_printf("progressSlider.val=%i", ((int)id(media_position).state) );
            id(disp1).send_command_printf("b4.pic=%i", 19 + atoi(id(media_repeat).state.c_str())); 
          }

          if(!strcmp(id(current_page2).c_str(),to_string("${pag_config}").c_str())){
            id(disp1).send_command_printf("brightSlider.val=%i", (int)id(brightness).state);
            if(id(sleep_screen).state){
              id(disp1).send_command_printf("b0.picc=27");
              id(disp1).send_command_printf("b0.picc2=27");
              id(disp1).send_command_printf("b1.picc=26");
              id(disp1).send_command_printf("b1.picc2=26");
            }else{
              id(disp1).send_command_printf("b0.picc=26");
              id(disp1).send_command_printf("b0.picc2=26");
              id(disp1).send_command_printf("b1.picc=27");
              id(disp1).send_command_printf("b1.picc2=27");
            }
            if(id(temporizador).state){
              id(disp1).send_command_printf("b2.picc=27");
              id(disp1).send_command_printf("b2.picc2=27");
              id(disp1).send_command_printf("b2info.picc=27");
              id(disp1).send_command_printf("b2info.picc2=27");
            }else{
              id(disp1).send_command_printf("b2.picc=26");
              id(disp1).send_command_printf("b2.picc2=26");
              id(disp1).send_command_printf("b2info.picc=26");
              id(disp1).send_command_printf("b2info.picc2=26");
            }
          }

          if(!strcmp(id(current_page2).c_str(),to_string("${pag_luzes}").c_str())){
            
            id(disp1).send_command_printf("b3.picc=%i", atoi(id(luz3).state.c_str()));
            id(disp1).send_command_printf("b3.picc2=%i",atoi(id(luz3).state.c_str()));
            
            id(disp1).send_command_printf("b2.picc=%i", atoi(id(luz2).state.c_str()));
            id(disp1).send_command_printf("b2.picc2=%i",atoi(id(luz2).state.c_str()));
            id(disp1).send_command_printf("b2info.picc=%i", atoi(id(luz2).state.c_str()));
            id(disp1).send_command_printf("b2info.picc2=%i",atoi(id(luz2).state.c_str()));


            id(disp1).send_command_printf("b4.picc=%i", atoi(id(luz4).state.c_str()));
            id(disp1).send_command_printf("b4.picc2=%i",atoi(id(luz4).state.c_str()));
            
            id(disp1).send_command_printf("b5.picc=%i", atoi(id(luzMaster).state.c_str()));
            id(disp1).send_command_printf("b5.picc2=%i",atoi(id(luzMaster).state.c_str()));

            id(disp1).send_command_printf("b1.picc=%i", atoi(id(luz1).state.c_str()));
            id(disp1).send_command_printf("b1.picc2=%i",atoi(id(luz1).state.c_str()));
            id(disp1).send_command_printf("b1info.picc=%i", atoi(id(luz1).state.c_str()));
            id(disp1).send_command_printf("b1info.picc2=%i",atoi(id(luz1).state.c_str()));
  

            id(disp1).set_component_text_printf("time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
            id(disp1).set_component_text_printf("temp", "%.f""°", id(temperature).state);
          }
          
          if(!strcmp(id(current_page2).c_str(),to_string("${pag_screensaver}").c_str())){
            id(disp1).set_component_text_printf("time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
            id(disp1).set_component_text_printf("temp", "%.f""°", id(temperature).state);
            id(disp1).set_component_text_printf("data", "%s, %02i %s", id(week_day).state.c_str(), id(homeassistant_time).now().day_of_month, id(month).state.c_str());
          }

          if (!strcmp(id(current_page2).c_str(),to_string("${pag_timeconfig}").c_str())){
            id(disp1).send_command_printf("b%i.picc=36", (int) id(timeConfig_state).state);
            id(disp1).send_command_printf("b%i.picc2=36",(int) id(timeConfig_state).state);
            if(id(timeConfig_state).state == 0){
              id(disp1).send_command_printf("horasSlider.val=%i", (int)(id(relogio_liga_hora).state));
              id(disp1).set_component_text_printf("t0", "%02i", (int)(id(relogio_liga_hora).state));
              id(disp1).send_command_printf("minutosSlider.val=%i", (int)(id(relogio_liga_minuto).state));
              id(disp1).set_component_text_printf("t1", "%02i", (int)(id(relogio_liga_minuto).state));
            } else {
              id(disp1).send_command_printf("horasSlider.val=%i", (int)(id(relogio_desliga_hora).state));
              id(disp1).set_component_text_printf("t0", "%02i", (int)(id(relogio_desliga_hora).state));
              id(disp1).send_command_printf("minutosSlider.val=%i", (int)(id(relogio_desliga_minuto).state));
              id(disp1).set_component_text_printf("t1", "%02i", (int)(id(relogio_desliga_minuto).state));
            }
            id(disp1).set_component_text_printf("time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
            id(timeconfig_horas_slider).update();
            id(timeconfig_minutos_slider).update();
          }


# id(disp1).set_component_text_printf("data", "%02i/%02i/%04i", id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: !secret nextion_update_url
    #auto_wake_on_touch: true
    update_interval: 1s
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 85
        - wait_until:
            api.connected
        - lambda: !lambda |-
            id(week_day).publish_state(to_string(id(homeassistant_time).now().day_of_week));
            id(month).publish_state(to_string(id(homeassistant_time).now().month));
            id(som_current_receiver).update();
            id(timeConfig_state).update();
            if(id(sleep_screen).state){
              id(disp1).send_command_printf("Config.brightsleep.val=1");
            }else{
              id(disp1).send_command_printf("Config.brightsleep.val=0");
            }
            id(Nextion_isConnected).update();
            id(disp1).send_command_printf("page 1");
    on_page:
      - lambda: !lambda |-
          id(current_page2) = to_string(x).c_str();
      - script.execute: refresh


